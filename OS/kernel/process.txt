//2016-05-11 14:29:11
// 进程简单实现
// 下面是理论知识，实现为：
初始化进程0
进程0是Linux操作系统中运行的第一个进程，也是Linux操作系统父子进程创建机制的第一个父进程。
1. 系统先初始化进程0， 管理进程0的task_struct结构体，讲进程0的task_struct与
LDT, TSS与GDT向挂接，对GDT, task[64]以及进程调度相关的寄存器进行初始化设置。
2. 进程需要进行多进程轮流执行，需要对时钟中断进行设置，以便进程0运行之后，为进程0
以及后续由它直接或者间接创建出来的进程能够轮流执行。
3. 进程0具备处理系统调用的能力，进程在运算时要与内核进行交互，交互的端口就是系统调用程序，
系统通过函数，set_system_gate 将 system_call 与 IDT相挂接，进程0就具有处理函数调用的能力了。
system_call 是系统调用的总入口。



进程1的创建及执行

1. 进程0处于3特权级状态，进程状态。 作为父进程调用fork函数创建第一个子进程-- 进程1。
   fork() 产生int $0x80 软中断，CPU将SS, ESP, EFLAGS, CS, EIP这5个寄存器的数值按照顺序压入到
   init_tasking()进程0的内核栈，这些数据将用在后续的copy_process()函数中来初始化进程1的TSS
2. 为进程1在task[64]中申请一个空闲的位置，并获取进程号（程序：进程队列中末尾添加）。获取进程号之后
   调用copy_process()函数准备参数
3. 调用copy_process函数， 进程0在copy_process（）函数中为：
	1） 进程1创建task_struct, 将进程0的task_struct的内容复制给进程1
	2） 为进程1的task_struct， tss个性化设置
	3） 为进程1创建第一个页表，将进程0的页表项内容赋给这个页表
	4） 进程1共享进程0的文件
	5） 设置进程1的GDT值
	6） 将进程1设置为就绪态



//实现方式为：
1. init_tasking(); 进程0，task_t(简化的task_struct)赋初值
2. 如果有fork()，则将进程０作为父进程，对fork()出来的进程1来赋值，
   复制进程0的页目录项，16KB大小
	
